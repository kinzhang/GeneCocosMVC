var LoaderScene = cc.Scene.extend({
    _image: null,
    _text: "Loading... ",
    _font: "Arial",
    _label : null,
    _className: "GeneJS.Cocos.LoaderScene",

    init : function(image, text, font){
        var self = this;

        if (image) {
            self._image = image;
        }
        if (text) {
            self._text = text;
        }
        if (font) {
            self._font = font;
        }

        var logoWidth = 160;
        var logoHeight = 200;

        var bgLayer = self._bgLayer = new cc.LayerColor(cc.color(32, 32, 32, 255));
        bgLayer.setPosition(cc.visibleRect.bottomLeft);
        self.addChild(bgLayer, 0);

        var fontSize = 24, lblHeight =  -logoHeight / 2 + 100;

        if(self._image){
            cc.loader.loadImg(self._image, {isCrossOrigin : false }, function(err, img){
                logoWidth = img.width;
                logoHeight = img.height;
                self._initStage(img, cc.visibleRect.center);
            });
            fontSize = 14;
            lblHeight = -logoHeight / 2 - 10;
        }

        var label = self._label = new cc.LabelTTF(self._text +"0%",  self._font, fontSize);
        label.setPosition(cc.pAdd(cc.visibleRect.center, cc.p(0, lblHeight)));
        label.setColor(cc.color(180, 180, 180));
        bgLayer.addChild(this._label, 10);

        return true;
    },
    _initStage: function (img, centerPos) {
        var self = this;
        var texture2d = self._texture2d = new cc.Texture2D();
        texture2d.initWithElement(img);
        texture2d.handleLoadedTexture();
        var logo = self._logo = new cc.Sprite(texture2d);
        logo.setScale(cc.contentScaleFactor());
        logo.x = centerPos.x;
        logo.y = centerPos.y;
        self._bgLayer.addChild(logo, 10);
    },
    onEnter: function () {
        var self = this;
        cc.Node.prototype.onEnter.call(self);
        self.schedule(self._startLoading, 0.3);
    },
    onExit: function () {
        cc.Node.prototype.onExit.call(this);
        var tmpStr = self._text +"0%";
        this._label.setString(tmpStr);
    },
    initWithResources: function (resources, cb) {
        if(cc.isString(resources))
            resources = [resources];
        this.resources = resources || [];
        this.cb = cb;
    },
    _startLoading: function () {
        var self = this;
        self.unschedule(self._startLoading);
        var res = self.resources;
        cc.loader.load(res,
            function (result, count, loadedCount) {
                var percent = (loadedCount / count * 100) | 0;
                percent = Math.min(percent, 100);
                self._label.setString(self._text + percent + "%");
            }, function () {
                if (self.cb)
                    self.cb();
            });
    }
});
LoaderScene.setImage = function(image){

};

LoaderScene.preload = function(resources, cb, sender){

    if(!this.loaderScene) {
        this.loaderScene = new LoaderScene();
        this.loaderScene.init(sender.loaderImage, sender.loaderText, sender.loaderFont);
    }
    this.loaderScene.initWithResources(resources, cb);
    cc.director.runScene(this.loaderScene);
    return this.loaderScene;
};

module.exports = LoaderScene;